" Setting
set number
set relativenumber
set mouse=a
set ttymouse=xterm2 " Fix mouse tmux
set wrap
set cursorline
set clipboard=
set background=dark
set termguicolors
set nobackup
set nowritebackup
set noswapfile
set updatetime=300
set hidden

" Search
set hlsearch
set ignorecase

" Split
set splitbelow
set splitright

" Indent
set autoindent
set expandtab

" Undo
set undodir=~/.vim/undo
set undofile

" Gvim
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=L
set guifont=JetBrains\ Mono\ 12

" Map leader <Space>
let mapleader=" "

" Navigation
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Jump center screen
nmap j jzz
nmap k kzz
nmap J 5jzz
nmap K 5kzz

" Next & Previous highlight search
nmap n nzz
nmap N Nzz

" Indent block
vmap > >gv
vmap < <gv

" Split window
nmap <leader>_ <CMD>split<CR>
nmap <leader>\| <CMD>vsplit<CR>

" Copy & Paste
nmap <leader>p "+p
vmap <leader>p "+p
vmap <leader>y "+y

" Disable highlight search
nmap <leader><Enter> <CMD>nohlsearch<CR>

" Trim whitespace
autocmd BufWritePre * %s/\s\+$//e

" Plugins
call plug#begin()
  Plug 'sainnhe/gruvbox-material'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-sleuth'
  Plug 'tpope/vim-fugitive'
  Plug 'preservim/nerdtree'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'vim-airline/vim-airline'
  Plug 'easymotion/vim-easymotion'
  Plug 'airblade/vim-gitgutter'
  Plug 'sheerun/vim-polyglot'
  Plug 'neoclide/coc.nvim', { 'branch': 'release' }
  Plug 'sbdchd/neoformat'
  Plug 'puremourning/vimspector'
call plug#end()

" Gruvbox
let g:gruvbox_material_foreground = "original"
let g:gruvbox_material_background = "hard"
let g:gruvbox_material_visual = "reverse"
let g:gruvbox_material_diagnostic_virtual_text = "colored"
let g:gruvbox_material_enable_bold = 1
let g:gruvbox_material_enable_italic = 1
let g:gruvbox_material_diagnostic_text_highlight = 1
let g:gruvbox_material_diagnostic_line_highlight = 1
let g:gruvbox_material_better_performance = 1
colorscheme gruvbox-material
hi Normal ctermbg=0 guibg=#000000
hi CursorLine ctermfg=NONE ctermbg=NONE guifg=NONE guibg=NONE
hi CursorLineNR ctermfg=14 ctermbg=NONE guifg=#d79921 guibg=NONE cterm=bold gui=bold

" Nerdtree
let NERDTreeMinimalUI = 1
nmap <C-n> <CMD>NERDTreeToggle<CR>
nmap <leader>e <CMD>NERDTreeFind<CR>

" Fzf
nmap <leader>ff <CMD>Files<CR>
nmap <leader>fb <CMD>Buffers<CR>
nmap <leader>fg <CMD>Rg<CR>
nmap <leader>fc <CMD>Commands<CR>

" Airline
let g:airline#extensions#tabline#enabled = 1
nmap <leader>. <CMD>bnext<CR>
nmap <leader>, <CMD>bprevious<CR>
nmap <leader>c <CMD>bdelete<CR>

" Easymotion
let g:EasyMotion_do_mapping = 0
nmap <leader><leader>s <Plug>(easymotion-s)
nmap <leader><leader>h <Plug>(easymotion-linebackward)
nmap <leader><leader>j <Plug>(easymotion-j)
nmap <leader><leader>k <Plug>(easymotion-k)
nmap <leader><leader>l <Plug>(easymotion-lineforward)

" Coc.nvim
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
inoremap <silent><expr> <c-space> coc#refresh()
" Next/previous diagnostics
nmap ]d <Plug>(coc-diagnostic-next)
nmap [d <Plug>(coc-diagnostic-prev)
" GoTo code navigation
nmap gd <Plug>(coc-definition)
nmap gt <Plug>(coc-type-definition)
nmap gi <Plug>(coc-implementation)
nmap gr <Plug>(coc-references)
" Show documentation
nmap <leader>h <CMD>call CocActionAsync('doHover')<CR>
" Rename
nmap <leader>rn <Plug>(coc-rename)
" Code action
nmap <leader>ca <Plug>(coc-codeaction-cursor)

" Vimspector
nmap <leader>dc <Plug>VimspectorContinue
nmap <leader>ds <Plug>VimspectorStop
nmap <leader>dr <Plug>VimpectorRestart
nmap <leader>db <Plug>VimspectorToggleBreakpoint
nmap <leader>dO <Plug>VimspectorStepOver
nmap <leader>di <Plug>VimspectorStepInto
nmap <leader>do <Plug>VimspectorStepOut
nmap <leader>de <Plug>VimspectorBalloonEval
